/* grid */

// grid media queries
@mixin for-viewport-width($vp-setting) {
    $vp-width:
        map-get(
            map-get($viewport-map, $vp-setting),
            'min-width'
        );
        
    @media (min-width: $vp-width) {
        @content;
    }
}

//grid
@mixin grid($no-of-cols, $col-partial-name) {
    @for $i from 1 through $no-of-cols {
        .#{$col-partial-name}-#{$i} {
            @include calculate-width-of-col($i, $no-of-cols);
            float: left;
        }
    }
}

//columns
@mixin default-for-cols($cols-prefix) {
    [class^='#{$cols-prefix}'] {
        @include calculate-width-of-col (1, 1);
    }
}

//settings per viewport
@mixin settings-per-viewport($vp-value, $vp-setting) {
    @include grid($number-of-grids, '#{$col-prefix}#{$vp-setting}');
    @include content-wrapper(map-get($vp-value, 'wrapper-width'))
}

//width of columns
@mixin calculate-width-of-col($col-span, $no-of-cols) {
    width: ($col-span / $no-of-cols) * 100%;
}

//content wrapper
@mixin content-wrapper($wrapper-width) {
    .content-wrapper {
        margin: 0 auto;
        width: $wrapper-width;
    }
}


/* ------------------------------------------------------
 * generate the grid system
 */

@mixin generate-grid-sys() {

    @each $vp-setting, $vp-value in $viewport-map {
        @if (map-get($vp-value, 'default')) {
            @include settings-per-viewport($vp-value, $vp-setting);
        } @else {
            @include for-viewport-width($vp-setting) {
                @include settings-per-viewport($vp-value, $vp-setting);
            }
        }
    }

    [class^='#{$col-prefix}'] {
        box-sizing: border-box;
        padding: $grid-gutter;
    }

    .row {
        margin-left: -$grid-gutter;
        margin-right: -$grid-gutter;
        
        &:after {
            clear: both;
            content: '';
            display: table;
        }
    }
}
